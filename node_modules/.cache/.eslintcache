[{"C:\\Users\\nanos\\OneDrive\\Documents\\Class\\reactEmpDirectory\\src\\index.js":"1","C:\\Users\\nanos\\OneDrive\\Documents\\Class\\reactEmpDirectory\\src\\App.js":"2","C:\\Users\\nanos\\OneDrive\\Documents\\Class\\reactEmpDirectory\\src\\reportWebVitals.js":"3","C:\\Users\\nanos\\OneDrive\\Documents\\Class\\reactEmpDirectory\\src\\components\\EmployeeTable.js":"4","C:\\Users\\nanos\\OneDrive\\Documents\\Class\\reactEmpDirectory\\src\\components\\EmployeeRow.js":"5"},{"size":500,"mtime":1627518743831,"results":"6","hashOfConfig":"7"},{"size":221,"mtime":1627518744050,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1627518743757,"results":"9","hashOfConfig":"7"},{"size":4721,"mtime":1627519099223,"results":"10","hashOfConfig":"7"},{"size":343,"mtime":1627518744087,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1wprug9",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\nanos\\OneDrive\\Documents\\Class\\reactEmpDirectory\\src\\index.js",[],"C:\\Users\\nanos\\OneDrive\\Documents\\Class\\reactEmpDirectory\\src\\App.js",[],"C:\\Users\\nanos\\OneDrive\\Documents\\Class\\reactEmpDirectory\\src\\reportWebVitals.js",[],"C:\\Users\\nanos\\OneDrive\\Documents\\Class\\reactEmpDirectory\\src\\components\\EmployeeTable.js",["23","24","25"],"import React, { useState, useEffect } from 'react'\nimport EmployeeRow from './EmployeeRow';\nimport currentEmployees from '../data/employee.json'\n\n\nexport default function EmployeeTable(props) {\n    const [employees, setEmployees] = useState([])\n    const [displayEmployees, setdisplayEmployees] = useState([]);\n    const [filtered, setFiltered] = useState(false);\n    const [newFilterValues, setNewFilterValues] = useState([]);\n\n    const createEmployeeRows = (theArray) => {\n        const display = theArray.map((ele, idx) => {\n            return (<EmployeeRow\n                key={idx}\n                id={ele.login.uuid}\n                first_name={ele.name.first}\n                last_name={ele.name.last}\n                email={ele.email}\n                job_title={ele.cell}\n            />)\n        });\n        \n        return display;\n    }\n\n    // Lifecycle function\n    useEffect(() => {\n        fetch('https://randomuser.me/api/?results=50')\n            .then(response => {\n                // network failure, request prevented\n                if (response.status >= 200 && response.status < 300) {\n                    return Promise.resolve(response);\n                }\n        \n        \n                return Promise.reject(new Error(response.statusText));\n            })\n            .then(response => response.json())\n            .then(data => {\n                console.log(data.results)\n                return data.results ;\n            })\n            .then((data) => { \n                console.log(data)\n                const display = createEmployeeRows(data)\n\n                console.log(\"display\", display);\n\n                setdisplayEmployees([...displayEmployees, display])\n                return data\n             })\n            .then((data) => {\n                setEmployees((prev) => {\n                    return [...prev, ...data]\n                });\n                // setEmployees(data.results)\n             })\n            .catch(error => {\n                // common error\n                return null;\n            });\n        \n        \n    }, []);\n\n    const handleFilterChange = (evt) => {\n        evt.preventDefault();\n        if (evt.target.value === \"No Filter\") {\n            const display = createEmployeeRows(employees)\n\n            setdisplayEmployees(display)\n            setFiltered(false);\n            return 1;\n        }\n        // ANCHOR TThis is just atest\n        let result = employees.filter(myemploy => {\n            if (myemploy.gender === evt.target.value) {\n\n                return myemploy;\n            }\n        })\n\n        const mapResult = createEmployeeRows(result)\n\n        if (mapResult !== null) {\n            setNewFilterValues([...mapResult]);\n            setFiltered(true)\n        }\n        else {\n            setFiltered(false)\n        }\n    }\n\n    const handleSortChange = (evt) => {\n        evt.preventDefault();\n        const sortEmploy = [...employees]\n\n        sortEmploy.sort((a, b) => {\n            if (a.name.last < b.name.last) { return -1; }\n            if (a.name.last > b.name.last) { return 1; }\n            return 0;\n        });\n\n        const display = createEmployeeRows(sortEmploy);\n\n        setNewFilterValues(display)\n        setFiltered(true)\n    }\n\n    return (\n        <div>\n            <div id=\"filterId\">\n                <label>\n                    Filter Employees by:\n                </label>\n                <select onChange={handleFilterChange}>\n                    <option value=\"No Filter\">Filter</option>\n                    <option value=\"female\">Female</option>\n                    <option value=\"male\">Male</option>\n                    {/* <option value=\"Tester\">Tester</option>\n                    <option value=\"Manager\">Manager</option>\n                    <option value=\"Account Executive\">Account Executive</option>\n                    <option value=\"Help Desk\">Help Desk</option> */}\n                </select>\n            </div>\n            <div id=\"sortId\">\n                <label>\n                    Sort Employees by:\n                </label>\n                <select onChange={handleSortChange}>\n                    <option value=\"last_name\">Sort</option>\n                    <option value=\"last_name\">Last Name</option>\n                </select>\n            </div>\n            <table>\n                <thead>\n                    <tr>\n                        <th>First Name</th>\n                        <th>Last Name</th>\n                        <th>Email</th>\n                        <th>Job Title</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {filtered ? newFilterValues : displayEmployees}\n                </tbody>\n            </table>\n        </div>\n    )\n}\n","C:\\Users\\nanos\\OneDrive\\Documents\\Class\\reactEmpDirectory\\src\\components\\EmployeeRow.js",[],{"ruleId":"26","severity":1,"message":"27","line":3,"column":8,"nodeType":"28","messageId":"29","endLine":3,"endColumn":24},{"ruleId":"30","severity":1,"message":"31","line":65,"column":8,"nodeType":"32","endLine":65,"endColumn":10,"suggestions":"33"},{"ruleId":"34","severity":1,"message":"35","line":77,"column":48,"nodeType":"36","messageId":"37","endLine":77,"endColumn":50},"no-unused-vars","'currentEmployees' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'displayEmployees'. Either include it or remove the dependency array. You can also do a functional update 'setdisplayEmployees(d => ...)' if you only need 'displayEmployees' in the 'setdisplayEmployees' call.","ArrayExpression",["38"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",{"desc":"39","fix":"40"},"Update the dependencies array to be: [displayEmployees]",{"range":"41","text":"42"},[2071,2073],"[displayEmployees]"]